[{"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\index.js":"1","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\App.js":"2","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Store\\index.js":"4","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Pages\\tabs.js":"5","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Reducers\\reducer.js":"6","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Components\\ProductList.js":"7","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Layout\\product-layout.js":"8","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\config\\config.js":"9","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Layout\\form-layout.js":"10","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Layout\\Edit-layout.js":"11"},{"size":543,"mtime":1609386928958,"results":"12","hashOfConfig":"13"},{"size":295,"mtime":1609735368397,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":257,"mtime":1610007584900,"results":"16","hashOfConfig":"13"},{"size":2670,"mtime":1610082188496,"results":"17","hashOfConfig":"13"},{"size":590,"mtime":1610005536217,"results":"18","hashOfConfig":"13"},{"size":4611,"mtime":1609999757162,"results":"19","hashOfConfig":"13"},{"size":21446,"mtime":1610097394358,"results":"20","hashOfConfig":"13"},{"size":646,"mtime":1609982166748,"results":"21","hashOfConfig":"13"},{"size":5577,"mtime":1610096869667,"results":"22","hashOfConfig":"13"},{"size":8890,"mtime":1610098290557,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1p1m4o5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\index.js",[],["49","50"],"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\App.js",[],"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Store\\index.js",[],"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Pages\\tabs.js",[],"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Reducers\\reducer.js",[],"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Components\\ProductList.js",[],"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Layout\\product-layout.js",["51","52","53"],"import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Spinner, Card, Badge, Stack, TextField, Icon, Button, Modal, TextContainer, Frame, Toast } from '@shopify/polaris';\r\nimport { connect } from 'react-redux';\r\nimport { Table, List } from 'antd';\r\nimport axios from 'axios';\r\nimport Config from '../config/config'\r\nimport {\r\n    ConversationMinor,\r\n    DeleteMinor,\r\n    EditMinor,\r\n    PlusMinor\r\n} from '@shopify/polaris-icons';\r\nimport store from '../Store';\r\nimport Formlayout from './form-layout';\r\nimport EditLayout from './Edit-layout';\r\n\r\n//-------------Render----------------//\r\n\r\nconst { Column } = Table;\r\nlet dataTest = []\r\nconst Productlayout = () => {\r\n    const [dataProduct, setdataProduct] = useState();\r\n    const [faqs, setFaqs] = useState(dataTest);\r\n    const [active, setActive] = useState(false);\r\n    const [activeModal, setActiveModal] = useState(false);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState();\r\n    const [Published, setPublished] = useState([]);\r\n    const [Unpublished, setUnpublished] = useState([]);\r\n    const [Locked, setLocked] = useState([]);\r\n    const [valueSearch, setValueSearch] = useState(\"\");\r\n\r\n    const [lock, setLock] = useState({});\r\n    const [close, setClose] = useState({});\r\n    const [activeToast, setactiveToast] = useState(false);\r\n    const [toast, setToast] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setdataProduct(store.getState().store.getaProduct);\r\n            setFaqs(store.getState().store.getaProduct.faqs);\r\n            dataTest = store.getState().store.getaProduct.faqs;\r\n        }, 500);\r\n        return () => clearTimeout(timer);\r\n\r\n    }, []);\r\n    useEffect(() => {\r\n        if (dataProduct) {\r\n            setActive(true);\r\n        } else {\r\n            setActive(false)\r\n        }\r\n    }, [dataProduct]);\r\n    useEffect(() => {\r\n        let Published = [];\r\n        let Unpublished = [];\r\n        let Locked = [];\r\n        if (faqs) {\r\n            for (let i = 0; i < faqs.length; i++) {\r\n                if (faqs[i].publish === \"1\") {\r\n                    Published.push(faqs[i].publish)\r\n                } else {\r\n                    Unpublished.push(faqs[i].publish)\r\n                }\r\n                if (faqs[i].locked === \"1\") {\r\n                    Locked.push(faqs[i].locked)\r\n                }\r\n            }\r\n            setPublished(Published);\r\n            setUnpublished(Unpublished);\r\n            setLocked(Locked);\r\n            console.log(faqs);\r\n        }\r\n    }, [faqs]);\r\n    const handleChange = useCallback((newValue) => {\r\n        setValueSearch(newValue);\r\n        if (newValue !== \"\") {\r\n            const results = faqs.filter(person => {\r\n                return (\r\n                    person.faqs_question.toLowerCase().includes(newValue.toLowerCase()) ||\r\n                    person.publishdate.toLowerCase().includes(newValue.toLowerCase()) ||\r\n                    person.faqs_name\r\n                        .toString()\r\n                        .toLowerCase()\r\n                        .includes(newValue.toLowerCase())\r\n                );\r\n            });\r\n            console.log(\"results\", results);\r\n            setFaqs(results);\r\n        } else {\r\n            setFaqs(dataTest)\r\n        }\r\n    }, [faqs]);\r\n\r\n    const handleChangeModal = useCallback((id) => {\r\n        console.log(id);\r\n        setError(false);\r\n        if (id) {\r\n            setTitle(\"Lock this question?\");\r\n            setLock({\r\n                content: 'Agree',\r\n                destructive: true,\r\n                onAction: () => lockFaqbyApi(id),\r\n            })\r\n            setClose({\r\n                content: 'Close',\r\n                onAction: closePopup,\r\n            })\r\n            setContent(\"Are you sure you want to lock this question? No one can reply this.\");\r\n            setActiveModal(!activeModal);\r\n        }\r\n\r\n    }, [activeModal]);\r\n    const handleChangeModalUnlock = useCallback((id) => {\r\n        setError(false);\r\n        if (id) {\r\n            setTitle(\"Unlock this question?\");\r\n            setLock({\r\n                content: 'Agree Test',\r\n                destructive: true,\r\n                onAction: () => UnlockFaqbyApi(id),\r\n            })\r\n            setClose({\r\n                content: 'Close',\r\n                onAction: closePopup,\r\n            })\r\n            setContent(\"Are you sure you want to lock this question? No one can reply this.\");\r\n            setActiveModal(!activeModal);\r\n        }\r\n    }, [activeModal]);\r\n    const deleteChangeModal = useCallback((id) => {\r\n        console.log(id);\r\n        setError(false);\r\n        if (id) {\r\n            setTitle(\"Delete this question?\");\r\n            setLock({\r\n                content: 'Delete',\r\n                destructive: true,\r\n                onAction: () => DeleteFaqbyApi(id),\r\n            })\r\n            setClose({\r\n                content: 'Close',\r\n                onAction: closePopup,\r\n            })\r\n            setContent(\"Are you sure you want to delete this question? This action cannot be undone.\");\r\n            setActiveModal(!activeModal);\r\n        }\r\n    }, [activeModal]);\r\n    const EditChangeModal = useCallback((data) => {\r\n        setError(false);\r\n        if (data) {\r\n            setTitle(\"Edit question\");\r\n            setLock(\"\")\r\n            setClose(\"\")\r\n            setContent(\r\n                <EditLayout data={data} resetFaqs1={resetFaqs1} />\r\n            )\r\n            setActiveModal(!activeModal);\r\n        }\r\n    }, [activeModal]);\r\n    const lockFaqbyApi = (id) => {\r\n        if (id) {\r\n            let formData = new FormData();\r\n            formData.append(\"id\", id);\r\n            formData.append(\"shop\", Config.shop);\r\n            formData.append(\"action\", \"lockQuestion\");\r\n            axios.post(`${Config.rootLink}/admin/functions/faqs.php`, formData)\r\n                .then(data => {\r\n                    resetFaqs()\r\n                    setActiveModal(false)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    setactiveToast(true);\r\n                    setToast(\"Lock Question is Failed !!!\")\r\n                });\r\n        } else {\r\n            setActiveModal(false);\r\n            setError(true);\r\n            setactiveToast(true);\r\n            setToast(\"Lock Question is Failed !!!\")\r\n        }\r\n    }\r\n    const resetFaqs = () => {\r\n        const productId = store.getState().store.getaProduct.id\r\n        axios.get(`${Config.rootLink}/admin/functions/faqs.php?action=getQuestionsByProductId&shop=${Config.shop}&id=${productId}`)\r\n            .then(data => {\r\n                setFaqs(data.data.faqs)\r\n                setActiveModal(false);\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n    const resetFaqs1 = () => {\r\n        const productId = store.getState().store.getaProduct.id\r\n        axios.get(`${Config.rootLink}/admin/functions/faqs.php?action=getQuestionsByProductId&shop=${Config.shop}&id=${productId}`)\r\n            .then(data => {\r\n                setFaqs(data.data.faqs)\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n    const UnlockFaqbyApi = (id) => {\r\n        if (id) {\r\n            let formData = new FormData();\r\n            formData.append(\"id\", id);\r\n            formData.append(\"shop\", Config.shop);\r\n            formData.append(\"action\", \"unlockQuestion\");\r\n            axios.post(`${Config.rootLink}/admin/functions/faqs.php`, formData)\r\n                .then(data => {\r\n                    resetFaqs()\r\n                    setActiveModal(false)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    setactiveToast(true);\r\n                    setToast(\"Unlock Question is Failed !!!\")\r\n                });\r\n        } else {\r\n            setActiveModal(false);\r\n            setError(true);\r\n            setactiveToast(true);\r\n            setToast(\"Unlock Question is Failed !!!\")\r\n        }\r\n    }\r\n    const DeleteFaqbyApi = (id) => {\r\n        if (id) {\r\n            let formData = new FormData();\r\n            formData.append(\"id\", id);\r\n            formData.append(\"shop\", Config.shop);\r\n            formData.append(\"action\", \"deleteQuestion\");\r\n            axios.post(`${Config.rootLink}/admin/functions/faqs.php`, formData)\r\n                .then(data => {\r\n                    setActiveModal(false);\r\n                    resetFaqs();\r\n                    setactiveToast(true);\r\n                    setToast(\"Delete Question is Success !!!\")\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    setactiveToast(true);\r\n                    setToast(\"Delete Question is Failed !!!\")\r\n                });\r\n        } else {\r\n            setActiveModal(false);\r\n            setError(true);\r\n            setactiveToast(true);\r\n            setToast(\"Delete Question is Failed !!!\")\r\n        }\r\n    };\r\n    const closePopup = useCallback(() => setActiveModal(!activeModal), [activeModal]);\r\n    const toggleActive = useCallback(() => setactiveToast((activeToast) => !activeToast), []);\r\n    const toastMarkup = activeToast ? (\r\n        error === true ? <Toast\r\n            content={toast}\r\n            error={error}\r\n            onDismiss={toggleActive}\r\n            duration={3000} />\r\n            : <Toast\r\n                content={toast}\r\n                onDismiss={toggleActive}\r\n                duration={3000} />\r\n\r\n    ) : null;\r\n    const modalPopUpForm = async (id) => {\r\n        if (id) {\r\n            setTitle(\"Create new question\");\r\n            setLock({\r\n                content: 'Save',\r\n                Primary: false,\r\n                onAction: addNewQuestion\r\n            })\r\n            setClose({\r\n                content: 'Close',\r\n                onAction: closePopup,\r\n            })\r\n            setContent(\r\n                <Formlayout />\r\n            )\r\n            setActiveModal(!activeModal);\r\n        }\r\n\r\n    }\r\n    const addNewQuestion = async () => {\r\n        const dataId = {\r\n            product_id: dataProduct.id.toString()\r\n        }\r\n        let dataFormNew = Object.assign({}, store.getState().store1.dataQuestion, dataId);\r\n        console.log(dataFormNew);\r\n        if (dataFormNew) {\r\n            let formData = new FormData();\r\n            formData.append(\"faqs\", JSON.stringify(dataFormNew));\r\n            formData.append(\"shop\", Config.shop);\r\n            formData.append(\"action\", \"addNewQuestion\");\r\n\r\n            await axios.post(`${Config.rootLink}/admin/functions/faqs.php`, formData)\r\n                .then(data => {\r\n                    if (data) {\r\n                        setActiveModal(false);\r\n                        resetFaqs();\r\n                        setactiveToast(true);\r\n                        setToast(\"Add Question is Success !!!\")\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    setactiveToast(true);\r\n                    setToast(\"Add Question is Failed !!!\")\r\n                });\r\n        } else {\r\n            setActiveModal(false);\r\n            setError(true);\r\n            setactiveToast(true);\r\n            setToast(\"Add Question is Failed !!!\")\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            {\r\n                active\r\n                    ? <div className=\"product-detail\">\r\n                        <Card sectioned>\r\n                            <div className=\"product-des\">\r\n                                <div className=\"prodcut-image\">\r\n                                    <img src={dataProduct.imageUrl} alt={dataProduct.title} />\r\n                                </div>\r\n                                <div className=\"prodcut-title\">\r\n                                    <a href={dataProduct.productUrl} rel=\"noreferrer\" target=\"_blank\">{dataProduct.title}</a>\r\n                                    <div className=\"margin--top--10\">\r\n                                        <Stack spacing=\"extraTight\">\r\n                                            <Badge className=\"abc\">{Published.length} Published</Badge>\r\n                                            <Badge>{Unpublished.length} Unpublished</Badge>\r\n                                            <Badge>{Locked.length} Locked</Badge>\r\n                                        </Stack>\r\n                                    </div>\r\n                                    <div className=\"margin--top--20 addQuestion\">\r\n                                        <Button primary onClick={() => modalPopUpForm(dataProduct.id)}>\r\n                                            <Icon source={PlusMinor} />Create new question</Button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </Card>\r\n                        <Card sectioned>\r\n                            <div className=\"margin--bottom--10\">\r\n                                <TextField value={valueSearch} onChange={handleChange} placeholder=\"Type to Search\" />\r\n                            </div>\r\n                            <Table\r\n                                dataSource={faqs}\r\n                                rowKey={data => data.id}\r\n                                pagination={{\r\n                                    defaultPageSize: 10,\r\n                                    showSizeChanger: true,\r\n                                    pageSizeOptions: ['10', '20', '30']\r\n                                }}>\r\n                                <Column title=\"Question\"\r\n                                    sorter={(a, b) => a.faqs_question.length - b.faqs_question.length}\r\n                                    render={(text, record) => (\r\n                                        <div className=\"faqs-item\" >\r\n                                            {record.faqs_question}\r\n                                        </div>\r\n                                    )} />\r\n                                <Column title=\"Last Answer\"\r\n                                    sorter={(a, b) => a.answer_lists.length - b.answer_lists.length}\r\n                                    width='35%'\r\n                                    render={(text, record) => (\r\n                                        <div className=\"faqs-item\" >\r\n                                            {record.answer_lists.length > 0\r\n                                                ? <List\r\n                                                    dataSource={record.answer_lists}\r\n                                                    renderItem={item => (\r\n                                                        <div className=\"answer_lists\">\r\n                                                            <div className=\"answer_title\">\r\n\r\n                                                                <span className=\"answer_cus\"><Icon\r\n                                                                    source={ConversationMinor} />{item.answer}</span>\r\n                                                            </div>\r\n                                                            <div className=\"answer_time\">{item.publishdate}</div>\r\n                                                        </div>\r\n                                                    )}\r\n                                                />\r\n                                                : <div></div>\r\n                                            }\r\n                                        </div>\r\n                                    )} />\r\n                                <Column title=\"Author\"\r\n                                    sorter={(a, b) => a.faqs_name.length - b.faqs_name.length}\r\n                                    render={(text, record) => (\r\n                                        <div className=\"faqs-item\" >\r\n                                            <h3>{record.faqs_name}</h3>\r\n                                        </div>\r\n                                    )} />\r\n                                <Column title=\"Date\"\r\n                                    sorter={(a, b) => new Date(a.publishdate) - new Date(b.publishdate)}\r\n                                    render={(text, record) => (\r\n                                        <div className=\"faqs-item\" >\r\n                                            {record.publishdate}\r\n                                        </div>\r\n                                    )} />\r\n                                <Column title={(\r\n                                    <div className=\"bold\">Status</div>\r\n                                )}\r\n                                    render={(text, record) => (\r\n                                        <div className=\"faqs-item\" >\r\n                                            <Stack spacing=\"extraTight\">\r\n                                                {\r\n                                                    record.publish === \"1\"\r\n                                                        ? <div className=\"Published\">\r\n                                                            <Badge>Published</Badge>\r\n                                                        </div>\r\n                                                        : <Badge>Unpublished</Badge>\r\n                                                }\r\n                                                {\r\n                                                    record.locked === \"1\"\r\n                                                        ? <Badge>Locked</Badge>\r\n                                                        : \"\"\r\n                                                }\r\n                                            </Stack>\r\n                                        </div>\r\n                                    )} />\r\n\r\n                                <Column title={(\r\n                                    <div className=\"bold\">Action</div>\r\n                                )}\r\n                                    render={(text, record) => (\r\n                                        <div className=\"faqs-edit\" >\r\n                                            <div className=\"lock\">\r\n                                                {\r\n                                                    record.locked === \"0\"\r\n                                                        ? <Button plain onClick={() => handleChangeModal(record.id)}>\r\n                                                            <i className=\"fas fa-lock\"></i>\r\n\r\n                                                        </Button>\r\n                                                        : <Button plain onClick={() => handleChangeModalUnlock(record.id)}>\r\n                                                            <i className=\"fas fa-unlock-alt\"></i>\r\n\r\n                                                        </Button>\r\n                                                }\r\n                                            </div>\r\n                                            <div className=\"edit\">\r\n                                                <Button plain onClick={() => EditChangeModal(record)}>\r\n                                                    <Icon\r\n                                                        source={EditMinor} />\r\n                                                </Button>\r\n                                            </div>\r\n                                            <div className=\"delete\">\r\n                                                <Button plain onClick={() => deleteChangeModal(record.id)}>\r\n                                                    <Icon className=\"abc\"\r\n                                                        source={DeleteMinor} />\r\n                                                </Button>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    )} />\r\n                            </Table>\r\n                        </Card>\r\n                        <div className=\"hidden\">\r\n                            <Frame>\r\n                                {toastMarkup}\r\n                            </Frame>\r\n                        </div>\r\n\r\n\r\n\r\n                    </div>\r\n                    : <div className=\"text-center\">\r\n                        <Spinner accessibilityLabel=\"Spinner example\" size=\"large\" color=\"inkLightest\" />\r\n                    </div>\r\n            }\r\n            <Modal\r\n                open={activeModal}\r\n                onClose={() => setActiveModal(false)}\r\n                title={title}\r\n                primaryAction={lock}\r\n\r\n                secondaryActions={close}\r\n            >\r\n                <Modal.Section>\r\n                    <TextContainer>\r\n                        {content}\r\n                    </TextContainer>\r\n                </Modal.Section>\r\n            </Modal>\r\n\r\n\r\n        </div >\r\n    );\r\n}\r\nconst mapStateToProps = (state) => {\r\n    console.log(state);\r\n    if (state.store1) {\r\n        return {\r\n            getaProduct: state.store.getaProduct,\r\n            dataQuestion: state.store1.dataQuestion\r\n        }\r\n    } else {\r\n        return {\r\n            getaProduct: state.store.getaProduct\r\n        }\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps)(Productlayout);\r\n","C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\config\\config.js",[],"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Layout\\form-layout.js",[],"C:\\xampp\\htdocs\\omegaApp\\product-faqs\\admin\\myapp\\src\\Layout\\Edit-layout.js",["54","55"],"import React, { useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport Config from '../config/config';\r\nimport { Modal, TextContainer, Frame, Toast, TextField, FormLayout, Select } from '@shopify/polaris';\r\nimport { DatePicker } from 'antd';\r\n\r\nimport moment from 'moment';\r\nconst EditLayout = (dataFaqs) => {\r\n    const [htmlList, setHtmlList] = useState([]);\r\n    const [activeModal, setActiveModal] = useState(false);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState();\r\n    const [lock, setLock] = useState({});\r\n    const [error, setError] = useState(false);\r\n    const [activeToast, setactiveToast] = useState(false);\r\n    const [toast, setToast] = useState(\"\");\r\n    const [nameQuestion, setNameQuestion] = useState(\"\");\r\n    const [emailQuestion, setEmailQuestion] = useState(\"\");\r\n    const [contentQuestion, setContentQuestion] = useState(\"\");\r\n    const [selectedQuestion, setSelectedQuestion] = useState('1');\r\n    const [valueTimePublish, setValueTimePublish] = useState(new Date());\r\n    const options = [\r\n        { label: 'Yes', value: '1' },\r\n        { label: 'No', value: '0' },\r\n    ];\r\n    const options1 = [\r\n        { label: 'Yes', value: '1' },\r\n        { label: 'No', value: '0' },\r\n    ];\r\n    useEffect(() => {\r\n        console.log(dataFaqs);\r\n        setHtmlList(prevArray => [...prevArray, ...dataFaqs.data.answer_lists]);\r\n        setNameQuestion(dataFaqs.data.faqs_name);\r\n        setEmailQuestion(dataFaqs.data.faqs_email);\r\n        setContentQuestion(dataFaqs.data.faqs_question);\r\n        setValueTimePublish(dataFaqs.data.publishdate);\r\n        setSelectedQuestion(dataFaqs.data.publish)\r\n    }, [dataFaqs]);\r\n    const test = useCallback((data, value, index) => {\r\n        console.log(value);\r\n        const id = [...htmlList];\r\n        for (let i = 0; i < id.length; i++) {\r\n            if (i === index) {\r\n                id[i].name = value\r\n            }\r\n        }\r\n\r\n        setHtmlList(id);\r\n        console.log(htmlList);\r\n    })\r\n    const listItems = htmlList.map((item, index) =>\r\n        <FormLayout key={index}>\r\n            <FormLayout.Group condensed>\r\n                <TextField label=\"Name\" value={item.name} onChange={(value) => test(item, value, index)} />\r\n                <TextField label=\"Email\" value={item.email} />\r\n            </FormLayout.Group>\r\n            <TextField label=\"Answer\" value={item.answer} />\r\n            <FormLayout.Group condensed>\r\n                <Select\r\n                    label=\"Publish this question\"\r\n                    options={options}\r\n                    value={item.publish}\r\n                />\r\n                <div className=\"date_time\">\r\n                    <label>Publish date</label>\r\n                    <DatePicker\r\n                        value={moment(item.publishdate, \"DD/MM/YYYY HH:mm\")}\r\n                        showTime={{ format: 'HH:mm' }}\r\n                        format=\"DD/MM/YYYY HH:mm\"\r\n                    />\r\n                </div>\r\n            </FormLayout.Group>\r\n            <div className=\"text-right\">\r\n                <button onClick={() => removeAnswerModal(item.id, index)}>removeAnswer</button>\r\n            </div>\r\n        </FormLayout>\r\n    );\r\n\r\n    const removeAnswerModal = (id, index) => {\r\n        if (id) {\r\n            setError(false);\r\n            setTitle(\"Delete this Answer?\");\r\n            setLock({\r\n                content: 'Agree',\r\n                destructive: true,\r\n                onAction: () => removeAnswer(id, index),\r\n            })\r\n            setContent(\"Are you sure you want to Delete this Answer? No one can reply this.\");\r\n            setActiveModal(!activeModal);\r\n        } else {\r\n            let temp = [...htmlList];\r\n            temp.splice(index, 1);\r\n            console.log(temp, index);\r\n            setHtmlList(temp)\r\n        }\r\n    };\r\n    const removeAnswer = (id, index) => {\r\n        console.log(htmlList);\r\n        setActiveModal(false);\r\n        if (id !== \"\") {\r\n            let formData = new FormData();\r\n            formData.append(\"id\", id);\r\n            formData.append(\"shop\", Config.shop);\r\n            formData.append(\"action\", \"deleteAnswer\");\r\n            axios.post(`${Config.rootLink}/admin/functions/faqs.php`, formData)\r\n                .then(data => {\r\n                    let temp = [...htmlList];\r\n                    temp.splice(index, 1);\r\n                    setHtmlList(temp);\r\n                    setActiveModal(false);\r\n                    setactiveToast(true);\r\n                    setToast(\"Delete is Success !!!\");\r\n                    dataFaqs.resetFaqs1();\r\n                })\r\n                .catch(error => {\r\n                    setactiveToast(true);\r\n                    setToast(\"Delete Failed !!!\")\r\n                });\r\n        } else {\r\n            let temp = [...htmlList];\r\n            temp.splice(index, 1);\r\n            setHtmlList(temp)\r\n            //setHtmlList(htmlList.slice(index, 1))\r\n        }\r\n    }\r\n\r\n    const addTest = () => {\r\n        let datatesst = {\r\n            id: \"\",\r\n            name: \"\",\r\n            email: \"\",\r\n            publish: \"1\",\r\n            publishdate: new Date().toLocaleDateString() + \" \" + new Date().toLocaleTimeString(),\r\n            answer: \"\",\r\n            newAnswer: \"1\"\r\n        }\r\n        setHtmlList(oldArray => [...oldArray, datatesst]);\r\n    }\r\n    const onChangeNameQuestion = useCallback((value) => {\r\n        setNameQuestion(value)\r\n    }, []);\r\n    const onChangeEmailQuestion = useCallback((value) => {\r\n        setEmailQuestion(value)\r\n    }, []);\r\n    const onChangeContentQuestion = useCallback((value) => {\r\n        setContentQuestion(value)\r\n    }, []);\r\n    const onChangeDateQuestion = (value, dateString) => {\r\n        console.log(dateString);\r\n        setValueTimePublish(dateString)\r\n    }\r\n    const handleSelectChange = useCallback((value) => setSelectedQuestion(value), []);\r\n    //const handleSelectChange1 = useCallback((value) => setSelectedAnswer(value), []);\r\n    const closePopup = useCallback(() => setActiveModal(!activeModal), [activeModal]);\r\n    const toggleActive = useCallback(() => setactiveToast((activeToast) => !activeToast), []);\r\n    const toastMarkup = activeToast ? (\r\n        error === true ? <Toast\r\n            content={toast}\r\n            error={error}\r\n            onDismiss={toggleActive}\r\n            duration={3000} />\r\n            : <Toast\r\n                content={toast}\r\n                onDismiss={toggleActive}\r\n                duration={3000} />\r\n\r\n    ) : null;\r\n    return (\r\n        <div className=\"posion-relative\">\r\n            <FormLayout>\r\n                <FormLayout.Group condensed>\r\n                    <TextField label=\"Name\" value={nameQuestion} onChange={onChangeNameQuestion} />\r\n                    <TextField label=\"Email\" value={emailQuestion} onChange={onChangeEmailQuestion} />\r\n                </FormLayout.Group>\r\n                <TextField label=\"Question\" value={contentQuestion} onChange={onChangeContentQuestion} />\r\n                <FormLayout.Group condensed>\r\n                    <Select\r\n                        label=\"Publish this question\"\r\n                        options={options}\r\n                        onChange={handleSelectChange}\r\n                        value={selectedQuestion}\r\n                    />\r\n                    <div className=\"date_time\">\r\n                        <label>Publish date</label>\r\n                        <DatePicker\r\n                            value={moment(valueTimePublish, \"DD/MM/YYYY HH:mm\")}\r\n                            showTime={{ format: 'HH:mm' }}\r\n                            format=\"DD/MM/YYYY HH:mm\"\r\n                            onChange={onChangeDateQuestion} />\r\n                    </div>\r\n                </FormLayout.Group>\r\n                <div className=\"margin--top--20\">\r\n                    <strong>Answer</strong>\r\n                </div>\r\n\r\n            </FormLayout>\r\n            {listItems}\r\n            <button onClick={addTest}>Add</button>\r\n            <button onClick={() => console.log(htmlList)}>listItems</button>\r\n            <Modal\r\n                open={activeModal}\r\n                onClose={() => setActiveModal(false)}\r\n                title={title}\r\n                primaryAction={lock}\r\n                secondaryActions={[\r\n                    {\r\n                        content: 'Close',\r\n                        onAction: closePopup,\r\n                    },\r\n                ]}\r\n            >\r\n                <Modal.Section>\r\n                    <TextContainer>\r\n                        {content}\r\n                    </TextContainer>\r\n                </Modal.Section>\r\n            </Modal>\r\n            <div className=\"hidden\">\r\n                <Frame>\r\n                    {toastMarkup}\r\n                </Frame>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditLayout;\r\n",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":113,"column":8,"nodeType":"62","endLine":113,"endColumn":21,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"64","line":130,"column":8,"nodeType":"62","endLine":130,"endColumn":21,"suggestions":"65"},{"ruleId":"60","severity":1,"message":"66","line":148,"column":8,"nodeType":"62","endLine":148,"endColumn":21,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":26,"column":11,"nodeType":"70","messageId":"71","endLine":26,"endColumn":19},{"ruleId":"60","severity":1,"message":"72","line":39,"column":18,"nodeType":"70","endLine":39,"endColumn":29},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'closePopup' and 'lockFaqbyApi'. Either include them or remove the dependency array.","ArrayExpression",["75"],"React Hook useCallback has missing dependencies: 'UnlockFaqbyApi' and 'closePopup'. Either include them or remove the dependency array.",["76"],"React Hook useCallback has missing dependencies: 'DeleteFaqbyApi' and 'closePopup'. Either include them or remove the dependency array.",["77"],"no-unused-vars","'options1' is assigned a value but never used.","Identifier","unusedVar","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [activeModal, closePopup, lockFaqbyApi]",{"range":"84","text":"85"},"Update the dependencies array to be: [UnlockFaqbyApi, activeModal, closePopup]",{"range":"86","text":"87"},"Update the dependencies array to be: [DeleteFaqbyApi, activeModal, closePopup]",{"range":"88","text":"89"},[3988,4001],"[activeModal, closePopup, lockFaqbyApi]",[4596,4609],"[UnlockFaqbyApi, activeModal, closePopup]",[5229,5242],"[DeleteFaqbyApi, activeModal, closePopup]"]